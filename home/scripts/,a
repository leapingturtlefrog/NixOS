#!/usr/bin/env bash
set -euo pipefail
#
# ,a ‚Äì add a package to /etc/nixos/home/a.nix declaratively

### CONFIG ####################################################################
nix_file="/etc/nixos/home/a.nix"
attr_path="home.packages"           # list inside a.nix
attr_dot=".$attr_path"              # nix-editor needs leading dot

die() { printf '‚ùå %s\n' "$*" >&2; exit 1; }

### 1. CLI / tool checks ######################################################
[[ $# -eq 1 ]] || die "usage: $(basename "$0") <package>"
pkg="$1"

command -v nix-editor >/dev/null   || die "'nix-editor' not found"
fmt() { command -v alejandra >/dev/null && alejandra --quiet "$nix_file"; }

### 2. locate nixpkgs (channel or flake) ######################################
nixpkgs_path=$(nix-instantiate --find-file nixpkgs 2>/dev/null || \
  nix eval --raw --impure '(builtins.getFlake "github:NixOS/nixpkgs").outPath')

pkgs_expr="import (builtins.toPath \"${nixpkgs_path}\") {}"
path_expr="(pkgs.lib.splitString \".\" \"${pkg}\")"

### 3. existence test #########################################################
exists=$(nix eval --raw --impure --expr "
  let pkgs = ${pkgs_expr};
  in pkgs.lib.hasAttrByPath ${path_expr} pkgs
")
[[ $exists == true ]] || die "\"$pkg\" not found in nixpkgs"

### 4. lock file for atomic edit + rebuild ####################################
exec 9>"$nix_file"; flock -x 9
trap 'flock -u 9' EXIT

# duplicate check via drvPath
is_present=$(nix eval --raw --impure --expr "
  let
    pkgs   = ${pkgs_expr};
    hm     = (import ${nix_file}) { inherit pkgs; config = {}; lib = pkgs.lib; };
    newDrv = (pkgs.lib.attrByPath ${path_expr} null pkgs).drvPath;
  in builtins.any (p: p.drvPath == newDrv) hm.${attr_path}
")
[[ $is_present == true ]] && { echo "‚ÑπÔ∏è  \"$pkg\" already listed"; exit 0; }

### 5. edit list, sort, format ################################################
echo "‚ûï adding \"$pkg\" ‚Ä¶"
if nix-editor --help | grep -q 'add-sorted'; then
  nix-editor --add-sorted "$attr_dot" "$pkg" "$nix_file"
else
  nix-editor --add  "$attr_dot" "$pkg" "$nix_file"
  nix-editor --sort "$attr_dot"        "$nix_file"
fi
fmt

### 6. commit & rebuild, rollback on failure ##################################
if ! git diff --quiet --exit-code -- "$nix_file"; then
  echo "üèó  rebuilding ‚Ä¶"
  ,ns "add ${pkg}" || {
    git restore --source=HEAD --staged --worktree "$nix_file"
    die "build failed, reverted changes"
  }
else
  echo "‚úÖ nothing to do"
fi

